name: Deploy Infrastructure

on: 
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'terraform/**'
      - '.github/**'
  push:
    branches:
      - 'main'
jobs:
  build-dev:
    name: Build dev plan
    runs-on: ubuntu-latest
    if: github.event_name != 'push'
    environment: build
    # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs
    permissions: write-all
    defaults:
      run:
        working-directory: ./terraform
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
        # print the %H hash of the ^2 second parent of the HEAD i.e. current commit
    - name: Get PR commit
      run:  echo "PR_COMMIT=$(git log -1 --format="%H" HEAD^2)" >> $GITHUB_ENV
  
    - name: Show logs
      run:  git log && echo $PR_COMMIT

    # Exports credentials as session environment variables for other actions to use
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::024848438238:role/GithubFullAccess #change to reflect your IAM role‚Äôs ARN
        audience: sts.amazonaws.com
        aws-region: eu-north-1

    - name: Verify IAM role
      run: |
        aws sts get-caller-identity

    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.3"

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
    
    - name: Terraform Init
      id: init
      run: terraform init
    
    - name: Terraform Validate
      id: validate
      run: terraform validate
    
    - name: Terraform Plan
      id: plan
      run: terraform plan --out tf.plan

    - uses: actions/upload-artifact@v4
      with:
        name: terra-plan
        path: ./terraform/tf.plan

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
     #   github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })
    
          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
    
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
    
          </details>
    
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    
          <details><summary>Show Plan</summary>
    
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
    
          </details>
    
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`.replace(/\u001b\[.*?m/g, '');
    
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

  deploy-dev:
    needs: build-dev
    name: Deploy dev plan
    runs-on: ubuntu-latest
    if: always() && !failure() && !cancelled() && github.event_name != 'pull_request'
    environment: dev
    permissions: write-all
    defaults:
      run:
        working-directory: ./terraform
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::024848438238:role/GithubFullAccess
        audience: sts.amazonaws.com
        aws-region: eu-north-1

    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.3"

    - name: Terraform Init
      id: init
      run: terraform init

    # Downloads and extracts the artifact into the directory below
    - uses: actions/download-artifact@v4
      if: github.event_name != 'push'
      with:
        name: terra-plan
        path: ./terraform/

    # print the %H hash of the ^2 second parent of the HEAD i.e. current commit
    - name: Get PR commit
      run:  echo "PR_COMMIT=$(git log -1 --format="%H" HEAD^2)" >> $GITHUB_ENV
    
    - name: Show logs
      run:  git log && echo $PR_COMMIT

    - name: Download artifact
      if: github.event_name == 'push'
      id: download-artifact
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        commit: ${{ env.PR_COMMIT }}.
        path: ./terraform/
        if_no_artifact_found: fail

    - name: Terraform Apply
      id: apply
      run: terraform apply tf.plan
